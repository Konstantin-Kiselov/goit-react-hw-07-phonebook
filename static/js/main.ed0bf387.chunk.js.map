{"version":3,"sources":["components/Form/Form.module.css","components/ContactList/ContactList.module.css","components/Section/Section.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/Container/Container.jsx","components/Section/Section.jsx","redux/contacts/contacts-operations.js","components/ContactList/Contact.jsx","components/ContactList/ContactList.jsx","redux/contacts/contacts-selectors.js","components/Form/Form.jsx","redux/contacts/contacts-actions.js","components/Filter/Filter.jsx","components/App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","Container","children","className","s","container","Section","title","section","axios","defaults","baseURL","fetchContacts","createAsyncThunk","a","get","data","deleteContact","contactId","delete","id","addContact","name","phone","number","contact","post","Contact","onClick","item","type","button","getVisibleContacts","contacts","filter","normalizedFilter","toLowerCase","includes","connect","items","loading","isLoading","dispatch","onDeleteContact","useDispatch","useEffect","list","map","getContacts","state","onSubmit","text","useSelector","useState","setName","setNumber","handleInputChange","event","target","value","reset","form","e","preventDefault","some","alert","label","input","pattern","required","onChange","changeFilter","createAction","contactsActions","App","createReducer","fulfilled","_","payload","pending","rejected","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","next","action","logger","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed0bf387.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__vS_wJ\",\"label\":\"Form_label__9LaxX\",\"input\":\"Form_input__3dyVT\",\"button\":\"Form_button__1I07k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__ndUSJ\",\"item\":\"ContactList_item__2zmvD\",\"button\":\"ContactList_button__tE4AS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2inT5\",\"title\":\"Section_title__1bQjz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2boYA\",\"input\":\"Filter_input__3qxkn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1VIa3\"};","import s from \"./Container.module.css\";\r\n\r\nfunction Container({ children }) {\r\n  return <div className={s.container}>{children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section className={s.section}>\r\n      {title && <h2 className={s.title}>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Section;\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n// import * as actions from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'https://619aa3d027827600174452d9.mockapi.io';\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetchContacts',\r\n  async () => {\r\n    const { data } = await axios.get('/contacts');\r\n    return data;\r\n  }\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  'contacts/deleteContact',\r\n  async contactId => {\r\n    const {\r\n      data: { id },\r\n    } = await axios.delete(`/contacts/${contactId}`);\r\n    return id;\r\n  }\r\n);\r\n\r\nexport const addContact = createAsyncThunk(\r\n  'contacts/addContact',\r\n  async ({ name, number: phone }) => {\r\n    const contact = { name, phone };\r\n\r\n    const { data } = await axios.post('/contacts', contact);\r\n    return data;\r\n  }\r\n);\r\n\r\n// const addContacts =\r\n//   ({ name, number: phone }) =>\r\n//   (dispatch, state) => {\r\n//     const {\r\n//       contacts: { items },\r\n//     } = state();\r\n\r\n// if (items.some(state => state.name === name)) {\r\n//   alert(`${name} is already in contacts!`);\r\n//   return state;\r\n// }\r\n\r\n//     const contact = {\r\n//       name,\r\n//       phone,\r\n//     };\r\n\r\n//     dispatch(actions.addContactRequest());\r\n\r\n//     axios\r\n//       .post('/contacts', contact)\r\n//       .then(({ data }) => {\r\n//         return dispatch(actions.addContactSuccess(data));\r\n//       })\r\n//       .catch(error => dispatch(actions.addContactError(error)));\r\n//   };\r\n\r\n// const fetchContacts = () => async dispatch => {\r\n//   dispatch(actions.fetchContactsRequest());\r\n\r\n//   try {\r\n//     const { data } = await axios.get('/contacts');\r\n\r\n//     dispatch(actions.fetchContactsSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(actions.fetchContactsError(error));\r\n//   }\r\n// };\r\n\r\n// const deleteContact = contactId => dispatch => {\r\n//   dispatch(actions.deleteContactRequest());\r\n\r\n// axios\r\n//   .delete(`/contacts/${contactId}`)\r\n//     .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n//     .catch(error => dispatch(actions.deleteContactError(error)));\r\n// };\r\n\r\n// const operations = { addContact, deleteContact, fetchContacts };\r\n\r\n// export default operations;\r\n","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nconst Contact = ({ name, number, phone, onClick }) => (\r\n  <li className={s.item}>\r\n    <p>\r\n      {name}: &nbsp;{number || phone}\r\n    </p>\r\n    <button type=\"button\" className={s.button} onClick={onClick}>\r\n      Delete\r\n    </button>\r\n  </li>\r\n);\r\nContact.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string,\r\n  phone: PropTypes.string,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import { useEffect } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport {\r\n  fetchContacts,\r\n  deleteContact,\r\n} from '../../redux/contacts/contacts-operations';\r\nimport PropTypes from 'prop-types';\r\nimport Contact from './Contact';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact, isLoading }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(fetchContacts()), [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <h1>Загружаем...</h1>\r\n      ) : (\r\n        <ul className={s.list}>\r\n          {contacts.map(({ id, name, number, phone }) => (\r\n            <Contact\r\n              key={id}\r\n              name={name}\r\n              number={number || phone}\r\n              onClick={() => onDeleteContact(id)}\r\n            />\r\n          ))}\r\n        </ul>\r\n      )}\r\n      {/* {isLoading && <h1>Загружаем...</h1>}\r\n      <ul className={s.list}>\r\n        {contacts.map(({ id, name, number, phone }) => (\r\n          <Contact\r\n            key={id}\r\n            name={name}\r\n            number={number || phone}\r\n            onClick={() => onDeleteContact(id)}\r\n          />\r\n        ))}\r\n      </ul> */}\r\n    </>\r\n  );\r\n};\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string,\r\n      phone: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nconst getVisibleContacts = (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter, loading } }) => ({\r\n  contacts: getVisibleContacts(items, filter),\r\n  isLoading: loading,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","export const getContacts = state => state.contacts.items;\r\n","import React, { useState } from 'react';\r\nimport { connect, useSelector } from 'react-redux';\r\n// import contactsActions from '../../redux/contacts/contacts-actions';\r\nimport { addContact } from '../../redux/contacts/contacts-operations';\r\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Form.module.css';\r\n\r\nfunction Form({ onSubmit }) {\r\n  const contacts = useSelector(getContacts);\r\n\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (contacts.some(contact => contact.name === name)) {\r\n      return alert(`${name} is already in contacts!`);\r\n    }\r\n\r\n    onSubmit({ name, number });\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label className={s.label}>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          className={s.input}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleInputChange}\r\n        />\r\n      </label>\r\n      <label className={s.label}>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          className={s.input}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleInputChange}\r\n        />\r\n      </label>\r\n      <button type=\"submit\" className={s.button}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\nForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: text => dispatch(addContact(text)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Form);\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n// export const fetchContactsRequest = createAction(\r\n//   'contacts/fetchContactsRequest'\r\n// );\r\n// export const fetchContactsSuccess = createAction(\r\n//   'contacts/fetchContactsSuccess'\r\n// );\r\n// export const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\n// export const deleteContactRequest = createAction(\r\n//   'contacts/deleteContactRequest'\r\n// );\r\n// export const deleteContactSuccess = createAction(\r\n//   'contacts/deleteContactSuccess'\r\n// );\r\n// export const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n// ================== STEP 2 ==================\r\n\r\n// const addContacts = createAction('contacts/add', ({ name, number }) => {\r\n//   return {\r\n//     payload: {\r\n//       id: uuidv4(),\r\n//       name,\r\n//       number,\r\n//     },\r\n//   };\r\n// });\r\n\r\n// const deleteContacts = createAction('contacts/delete');\r\n// const changeFilter = createAction('contacts/changeFitler');\r\n\r\n// const contactsActions = {\r\n// addContactRequest,\r\n// addContactSuccess,\r\n// addContactError,\r\n// deleteContacts,\r\n// changeFilter,\r\n// };\r\n\r\n// export default contactsActions;\r\n\r\n// ================== STEP 1 ==================\r\n\r\n// const addContacts = ({ name, number }) => ({\r\n//   type: ADD,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContacts = contactId => ({\r\n//   type: DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//   type: CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import { connect } from 'react-redux';\r\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        className={s.input}\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n}\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(contactsActions.changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","// import { useEffect, useState } from 'react';\nimport Container from './Container/Container';\nimport Section from './Section/Section';\nimport ContactList from './ContactList/ContactList';\nimport Form from './Form/Form';\nimport Filter from './Filter/Filter';\n\nexport default function App() {\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactList />\n      </Section>\n    </Container>\n  );\n}\n\n// useEffect(() => {\n//   const contactsLocalStor = localStorage.getItem('contacts');\n//   const parsedContacts = JSON.parse(contactsLocalStor);\n\n//   if (parsedContacts) {\n//     setContacts(parsedContacts);\n//   }\n// }, []);\n\n// useEffect(() => {\n//   localStorage.setItem('contacts', JSON.stringify(contacts));\n// }, [contacts]);\n\n// const [contacts, setContacts] = useState([\n// { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ]);\n// const [filter, setFilter] = useState('');\n\n// useEffect(() => {\n//   const contactsLocalStor = localStorage.getItem('contacts');\n//   const parsedContacts = JSON.parse(contactsLocalStor);\n\n//   if (parsedContacts) {\n//     setContacts(parsedContacts);\n//   }\n// }, []);\n\n// useEffect(() => {\n//   localStorage.setItem('contacts', JSON.stringify(contacts));\n// }, [contacts]);\n\n// const getVisibleContacts = () => {\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const addContact = ({ name, number }) => {\n//   const contact = {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   };\n\n//   setContacts(contacts => {\n//     if (contacts.some(contact => contact.name === name)) {\n//       alert(`${name} is already in contacts!`);\n//       return contacts;\n//     }\n//     return [contact, ...contacts];\n//   });\n// };\n\n// const deleteContact = contactId => {\n//   setContacts(contacts =>\n//     contacts.filter(contact => contact.id !== contactId),\n//   );\n// };\n\n// const changeFitler = e => {\n//   setFilter(e.target.value);\n// };\n\n// const visibleContacts = getVisibleContacts();\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\nimport { changeFilter } from './contacts-actions';\r\n\r\nimport {\r\n  fetchContacts,\r\n  deleteContact,\r\n  addContact,\r\n} from './contacts-operations';\r\n\r\n// const initialState = [\r\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n// ];\r\n\r\nconst items = createReducer([], {\r\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\r\n  [addContact.fulfilled]: (state, { payload }) => [...state, payload],\r\n  [deleteContact.fulfilled]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n  [deleteContact.pending]: () => true,\r\n  [deleteContact.fulfilled]: () => false,\r\n  [deleteContact.rejected]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [fetchContacts.rejected]: (_, { payload }) => payload,\r\n  [fetchContacts.fulfilled]: () => null,\r\n  [addContact.rejected]: (_, { payload }) => payload,\r\n  [addContact.fulfilled]: () => null,\r\n  [deleteContact.rejected]: (_, { payload }) => payload,\r\n  [deleteContact.fulfilled]: () => null,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n\r\n// ================== STEP 2 ==================\r\n\r\n// const items = createReducer(initialState, {\r\n//   [addContacts]: (state, { payload }) => {\r\n//     if (state.some(({ name }) => name === payload.name)) {\r\n//       alert(`${payload.name} is already in contacts!`);\r\n//       return state;\r\n//     }\r\n//     return [...state, payload];\r\n//   },\r\n//   [deleteContacts]: (state, { payload }) =>\r\n//     state.filter(({ id }) => id !== payload),\r\n// });\r\n\r\n// const filter = createReducer('', {\r\n//   [changeFilter]: (_, { payload }) => payload,\r\n// });\r\n\r\n// export default combineReducers({\r\n//   items,\r\n//   filter,\r\n// });\r\n\r\n// ================== STEP 1 ==================\r\n\r\n// const items = (state = initialState, { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD:\r\n//       if (state.some(({ name }) => name === payload.name)) {\r\n//         alert(`${payload.name} is already in contacts!`);\r\n//         return state;\r\n//       }\r\n\r\n//       return [...state, payload];\r\n\r\n//     case DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst myMiddleware = store => next => action => {\r\n  // console.log('Моя прослойка action', action);\r\n  // console.log('Моя прослойка next', next);\r\n  // console.log('Моя прослойка store.getState()', store.getState());\r\n\r\n  next(action);\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  myMiddleware,\r\n  logger,\r\n];\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}